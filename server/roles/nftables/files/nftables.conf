# Managed by ansible.  Do not modify

# drop any existing nftables ruleset
flush ruleset


define if_trust = { lan0, lan0.2001, lan0.2004 }
define if_iot = { lan0.2012, lan0.2254 }
define if_wan = wan0
define if_lan = { $if_trust, $if_iot }

define allowed_icmp_types = {
    echo-request,
    echo-reply,
    time-exceeded,
    parameter-problem,
    destination-unreachable,
}

define allowed_icmpv6_types = {
    echo-request,
    echo-reply,
    time-exceeded,
    parameter-problem,
    destination-unreachable,
    packet-too-big,
    nd-router-advert,
    nd-router-solicit,
    nd-neighbor-solicit,
    nd-neighbor-advert,
    mld-listener-query,
}

# a common table for both IPv4 and IPv6
table inet filter {
    chain input {
        type filter hook input priority filter
        policy drop

        # accept loopback traffic
        iifname lo accept

        # Allow established and related packets and drop invalid states
        ct state established,related accept
        ct state invalid drop

        ip protocol icmp icmp type $allowed_icmp_types accept

        ip6 nexthdr icmpv6 icmpv6 type $allowed_icmpv6_types accept

        iifname vmap {
            $if_iot: jump input_iot,
            $if_trust: jump input_trust,
            $if_wan: jump input_wan,
        }

        log prefix "Dropped: " flags all drop
    }

    chain input_wan {
        icmp type echo-request limit rate 5/second accept
        icmpv6 type echo-request limit rate 5/second accept

        udp dport bootpc counter accept
        udp dport dhcpv6-client counter accept

        # nginx
        tcp dport https accept
    }

    chain input_iot {
        jump input_lan
    }

    chain input_trust {
        jump input_lan

        # accept ssh
        tcp dport ssh accept

        # accept tftp (pxe)
        udp dport tftp accept
        udp dport 4011 accept
    }

    # Common allow list for all vlans
    chain input_lan {
        ip protocol igmp accept
        ip6 nexthdr igmp accept

        udp dport bootps accept
        udp dport bootpc accept

        udp dport domain accept
        tcp dport domain accept

        udp dport mdns accept

        udp dport ntp accept

        # nginx
        tcp dport http accept
        tcp dport https accept
    }

    chain forward {
        type filter hook forward priority 0
        policy drop

        # Allow established and related packets and drop invalid states
        ct state invalid drop
        ct state established,related accept

        iifname $if_trust oifname $if_iot jump forward_trust_to_iot
        iifname $if_iot oifname $if_trust jump forward_iot_to_trust
        iifname $if_trust oifname $if_trust accept
        iifname $if_lan oifname $if_wan accept
    }

    chain forward_trust_to_iot {
        accept
    }

    chain forward_iot_to_trust {
        # Allow upstair-dashboard to access home assistant
        ether saddr b0:f7:c4:85:36:fa ip daddr 192.168.1.18 tcp dport 8123 counter accept
    }
}

table ip nat {
    chain postrouting {
        type nat hook postrouting priority srcnat

        # nat all traffic going out to wan0
        oifname wan0 masquerade
    }
}
