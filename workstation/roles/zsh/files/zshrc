function _os() {
    case $(uname -s) in
    Linux)
        echo "linux"
        ;;
    Darwin)
        echo "darwin"
        ;;
    *)
        echo "unknownos"
        ;;
    esac
}

function _arch() {
    case $(uname -m) in
    x86_64)
        echo "amd64"
        ;;
    *)
        echo "unknownarch"
        ;;
    esac
}

function _distro() {
    case $(uname -s) in
    Linux)
        [[ -f /etc/gentoo-release ]] && distro="gentoo"
        [[ -f /etc/redhat-release ]] && distro=$(awk '{ print $1 }' /etc/redhat-release)
        [[ -f /etc/debian_version ]] && distro="debian"
        [[ -f /etc/lsb*release ]] &&  eval `cat /etc/lsb*release`; distro=$DISTRIB_ID
        ;;
    Darwin)
        distro="osx"
        ;;
    *)
        distro="unknowndistro"
        ;;
    esac
    echo $distro | tr "[:upper:]" "[:lower:]"
}

_known_os=("linux" "darwin" "unknownos")
_known_arch=("amd64" "unknownarch")
_known_distro=("gentoo", "debian", "osx", "unknowndistro")

OS=$(_os)
ARCH=$(_arch)
DISTRO=$(_distro)


function _is_platform_file() {
    file=${1}
    file="$(basename ${file:r})"
    parts=("${(@s/_/)file}")
    shift parts

    while (( ${#parts} )); do
        plat=${parts:0}
        [[ ${_known_os[(ie)$plat]} -le ${#_known_os} ]] && [[ $OS != $plat ]] && return 1
        [[ ${_known_arch[(ie)$plat]} -le ${#_known_arch} ]] && [[ $ARCH != $plat ]] && return 1
        shift parts
    done

    return 0
}

[[ -d $HOME/.zshrc.d ]] || exit

for f in $HOME/.zshrc.d/*.zsh; do
    [[ -f $f ]] || continue
    _is_platform_file $f || continue
    source $f
done
