---
# (c) 2017, Sam Doran <sdoran@redhat.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
# First Test
# ##############################################################################
# Test changing the state, which requires a reboot

- name: TEST 1 | Make sure grubby is present
  ansible.builtin.package:
    name: grubby
    state: present

- name: TEST 1 | Get current SELinux config file contents
  ansible.builtin.slurp:
    src: /etc/sysconfig/selinux
  register: selinux_config_original_base64

- name: TEST 1 | Register SELinux config and SELinux status
  ansible.builtin.set_fact:
    selinux_config_original_raw: "{{ selinux_config_original_base64.content | b64decode }}"
    before_test_sestatus: "{{ ansible_selinux }}"

- name: TEST 1 | Split by line and register original config
  ansible.builtin.set_fact:
    selinux_config_original: "{{ selinux_config_original_raw.split('\n') }}"

- name: TEST 1 | Debug selinux_config_original, before_test_sestatus, and ansible_selinux
  ansible.builtin.debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
    - selinux_config_original
    - before_test_sestatus
    - ansible_selinux

- name: TEST 1 | Setup SELinux configuration for tests
  ansible.posix.selinux:
    state: enforcing
    policy: targeted

- name: TEST 1 | Disable SELinux
  ansible.posix.selinux:
    state: disabled
    policy: targeted
  register: _disable_test1

- name: TEST 1 | Debug _disable_test1
  ansible.builtin.debug:
    var: _disable_test1
    verbosity: 1

- name: Before gathering the fact
  ansible.builtin.debug:
    msg: "{{ ansible_selinux }}"

- name: TEST 1 | Re-gather facts
  ansible.builtin.setup:

- name: After gathering the fact
  ansible.builtin.debug:
    msg: "{{ ansible_selinux }}"

- name: TEST 1 | Assert that status was changed, reboot_required is True, a warning was displayed, and SELinux is configured properly
  ansible.builtin.assert:
    that:
      - _disable_test1 is changed
      - _disable_test1.reboot_required
      - (_disable_test1.warnings | length ) >= 1
      - ansible_selinux.config_mode == 'disabled'
      - ansible_selinux.type == 'targeted'

- name: TEST 1 | Debug ansible_selinux
  ansible.builtin.debug:
    var: ansible_selinux
    verbosity: 1

- name: TEST 1 | Disable SELinux again
  ansible.posix.selinux:
    state: disabled
    policy: targeted
  register: _disable_test2

- name: Test 1 | Debug _disable_test2
  ansible.builtin.debug:
    var: _disable_test2
    verbosity: 1

- name: TEST 1 | Assert that no change is reported, a warning was displayed, and reboot_required is True
  ansible.builtin.assert:
    that:
      - _disable_test2 is not changed
      - (_disable_test1.warnings | length ) >= 1
      - _disable_test2.reboot_required

- name: TEST 1 | Get modified config file
  ansible.builtin.slurp:
    src: /etc/sysconfig/selinux
  register: selinux_config_after_base64

- name: TEST 1 | Register modified config
  ansible.builtin.set_fact:
    selinux_config_after_raw: "{{ selinux_config_after_base64.content | b64decode }}"

- name: TEST 1 | Split by line and register modified config
  ansible.builtin.set_fact:
    selinux_config_after: "{{ selinux_config_after_raw.split('\n') }}"

- name: TEST 1 | Debug selinux_config_after
  ansible.builtin.debug:
    var: selinux_config_after
    verbosity: 1

- name: TEST 1 | Ensure SELinux config file is properly formatted
  ansible.builtin.assert:
    that:
      - selinux_config_original | length == selinux_config_after | length
      - (selinux_config_after | select("search", "^SELINUX=disabled\s*$") | list | length) > 0
      - (selinux_config_after | select("search", "^SELINUXTYPE=targeted\s*$") | list | length) > 0

- name: TEST 1 | Disable SELinux again, with kernel arguments update
  ansible.posix.selinux:
    state: disabled
    policy: targeted
    update_kernel_param: true
  register: _disable_test2

- name: Check kernel command-line arguments
  ansible.builtin.command: grubby --info=DEFAULT
  changed_when: false
  register: _grubby_test1

- name: TEST 1 | Assert that kernel cmdline contains selinux=0
  ansible.builtin.assert:
    that:
      - "' selinux=0' in _grubby_test1.stdout"

- name: TEST 1 | Enable SELinux, without kernel arguments update
  ansible.posix.selinux:
    state: disabled
    policy: targeted
  register: _disable_test2

- name: Check kernel command-line arguments
  ansible.builtin.command: grubby --info=DEFAULT
  changed_when: false
  register: _grubby_test1

- name: TEST 1 | Assert that kernel cmdline still contains selinux=0
  ansible.builtin.assert:
    that:
      - "' selinux=0' in _grubby_test1.stdout"

- name: TEST 1 | Reset SELinux configuration for next test (also kernel args)
  ansible.posix.selinux:
    state: enforcing
    update_kernel_param: true
    policy: targeted

- name: Check kernel command-line arguments
  ansible.builtin.command: grubby --info=DEFAULT
  changed_when: false
  register: _grubby_test2

- name: TEST 1 | Assert that kernel cmdline doesn't contain selinux=0
  ansible.builtin.assert:
    that:
      - "' selinux=0' not in _grubby_test2.stdout"

# Second Test
# ##############################################################################
# Test changing only the policy, which does not require a reboot

- name: TEST 2 | Make sure the policy is present
  ansible.builtin.package:
    name: selinux-policy-mls
    state: present

- name: TEST 2 | Set SELinux policy
  ansible.posix.selinux:
    state: enforcing
    policy: mls
  register: _state_test1

- name: TEST 2 | Debug _state_test1
  ansible.builtin.debug:
    var: _state_test1
    verbosity: 1

- name: TEST 2 | Re-gather facts
  ansible.builtin.setup:

- name: TEST 2 | Debug ansible_selinux
  ansible.builtin.debug:
    var: ansible_selinux
  tags: debug

- name: TEST 2 | Assert that status was changed, reboot_required is False, no warnings were displayed, and SELinux is configured properly
  ansible.builtin.assert:
    that:
      - _state_test1 is changed
      - not _state_test1.reboot_required
      - _state_test1.warnings is not defined
      - ansible_selinux.config_mode == 'enforcing'
      - ansible_selinux.type == 'mls'

- name: TEST 2 | Set SELinux policy again
  ansible.posix.selinux:
    state: enforcing
    policy: mls
  register: _state_test2

- name: TEST 2 | Debug _state_test2
  ansible.builtin.debug:
    var: _state_test2
    verbosity: 1

- name: TEST 2 | Assert that no change was reported, no warnings were displayed, and reboot_required is False
  ansible.builtin.assert:
    that:
      - _state_test2 is not changed
      - _state_test2.warnings is not defined
      - not _state_test2.reboot_required

- name: TEST 2 | Get modified config file
  ansible.builtin.slurp:
    src: /etc/sysconfig/selinux
  register: selinux_config_after_base64

- name: TEST 2 | Register modified config
  ansible.builtin.set_fact:
    selinux_config_after_raw: "{{ selinux_config_after_base64.content | b64decode }}"

- name: TEST 2 | Split by line and register modified config
  ansible.builtin.set_fact:
    selinux_config_after: "{{ selinux_config_after_raw.split('\n') }}"

- name: TEST 2 | Debug selinux_config_after
  ansible.builtin.debug:
    var: selinux_config_after
    verbosity: 1

- name: TEST 2 | Ensure SELinux config file is properly formatted
  ansible.builtin.assert:
    that:
      - selinux_config_original | length == selinux_config_after | length
      - selinux_config_after[selinux_config_after.index('SELINUX=enforcing')]  is search("^SELINUX=\w+$")
      - selinux_config_after[selinux_config_after.index('SELINUXTYPE=mls')]  is search("^SELINUXTYPE=\w+$")

- name: TEST 2 | Reset SELinux configuration for next test
  ansible.posix.selinux:
    state: enforcing
    policy: targeted

# Third Test
# ##############################################################################
# Test changing non-existing policy

- name: TEST 3 | Set SELinux policy
  ansible.posix.selinux:
    state: enforcing
    policy: non-existing-selinux-policy
  register: _state_test1
  ignore_errors: true

- name: TEST 3 | Debug _state_test1
  ansible.builtin.debug:
    var: _state_test1
    verbosity: 1

- name: TEST 3 | Re-gather facts
  ansible.builtin.setup:

- name: TEST3 | Debug ansible_selinux
  ansible.builtin.debug:
    var: ansible_selinux
  tags: debug

- name: TEST 3 | Assert that status was not changed, the task failed, the msg contains proper information and SELinux was not changed
  ansible.builtin.assert:
    that:
      - _state_test1 is not changed
      - _state_test1 is failed
      - _state_test1.msg == 'Policy non-existing-selinux-policy does not exist in /etc/selinux/'
      - ansible_selinux.config_mode == 'enforcing'
      - ansible_selinux.type == 'targeted'

# Fourth Test
# ##############################################################################
# Test if check mode returns correct changed values and
# doesn't make any changes

- name: TEST 4 | Set SELinux to enforcing
  ansible.posix.selinux:
    state: enforcing
    policy: targeted
  register: _check_mode_test1

- name: TEST 4 | Debug _check_mode_test1
  ansible.builtin.debug:
    var: _check_mode_test1
    verbosity: 1

- name: TEST 4 | Set SELinux to enforcing in check mode
  ansible.posix.selinux:
    state: enforcing
    policy: targeted
  register: _check_mode_test1
  check_mode: true

- name: TEST 4 | Re-gather facts
  ansible.builtin.setup:

- name: TEST 4| Debug ansible_selinux
  ansible.builtin.debug:
    var: ansible_selinux
    verbosity: 1
  tags: debug

- name: TEST 4 | Assert that check mode is idempotent
  ansible.builtin.assert:
    that:
      - _check_mode_test1 is success
      - not _check_mode_test1.reboot_required
      - ansible_selinux.config_mode == 'enforcing'
      - ansible_selinux.type == 'targeted'

- name: TEST 4 | Set SELinux to permissive in check mode
  ansible.posix.selinux:
    state: permissive
    policy: targeted
  register: _check_mode_test2
  check_mode: true

- name: TEST 4 | Re-gather facts
  ansible.builtin.setup:

- name: TEST 4 | Debug ansible_selinux
  ansible.builtin.debug:
    var: ansible_selinux
    verbosity: 1
  tags: debug

- name: TEST 4 | Assert that check mode doesn't set state permissive and returns changed
  ansible.builtin.assert:
    that:
      - _check_mode_test2 is changed
      - not _check_mode_test2.reboot_required
      - ansible_selinux.config_mode == 'enforcing'
      - ansible_selinux.type == 'targeted'

- name: TEST 4 | Disable SELinux in check mode
  ansible.posix.selinux:
    state: disabled
  register: _check_mode_test3
  check_mode: true

- name: TEST 4 | Re-gather facts
  ansible.builtin.setup:

- name: TEST 4 | Debug ansible_selinux
  ansible.builtin.debug:
    var: ansible_selinux
    verbosity: 1
  tags: debug

- name: TEST 4 | Assert that check mode didn't change anything, status is changed, reboot_required is True, a warning was displayed
  ansible.builtin.assert:
    that:
      - _check_mode_test3 is changed
      - _check_mode_test3.reboot_required
      - (_check_mode_test3.warnings | length ) >= 1
      - ansible_selinux.config_mode == 'enforcing'
      - ansible_selinux.type == 'targeted'

- name: TEST 4 | Set SELinux to permissive
  ansible.posix.selinux:
    state: permissive
    policy: targeted
  register: _check_mode_test4

- name: TEST 4 | Debug _check_mode_test4
  ansible.builtin.debug:
    var: _check_mode_test4
    verbosity: 1

- name: TEST 4 | Disable SELinux in check mode
  ansible.posix.selinux:
    state: disabled
  register: _check_mode_test4
  check_mode: true

- name: TEST 4 | Re-gather facts
  ansible.builtin.setup:

- name: TEST 4 | Debug ansible_selinux
  ansible.builtin.debug:
    var: ansible_selinux
    verbosity: 1
  tags: debug

- name: TEST 4 | Assert that check mode didn't change anything, status is changed, reboot_required is True, a warning was displayed
  ansible.builtin.assert:
    that:
      - _check_mode_test4 is changed
      - _check_mode_test4.reboot_required
      - (_check_mode_test3.warnings | length ) >= 1
      - ansible_selinux.config_mode == 'permissive'
      - ansible_selinux.type == 'targeted'

- name: TEST 4 | Set SELinux to enforcing
  ansible.posix.selinux:
    state: enforcing
    policy: targeted
  register: _check_mode_test5

- name: TEST 4 | Debug _check_mode_test5
  ansible.builtin.debug:
    var: _check_mode_test5
    verbosity: 1

- name: TEST 4 | Disable SELinux
  ansible.posix.selinux:
    state: disabled
  register: _check_mode_test5

- name: TEST 4 | Disable SELinux in check mode
  ansible.posix.selinux:
    state: disabled
  register: _check_mode_test5
  check_mode: true

- name: TEST 4 | Re-gather facts
  ansible.builtin.setup:

- name: TEST 4 | Debug ansible_selinux
  ansible.builtin.debug:
    var: ansible_selinux
    verbosity: 1
  tags: debug

- name: TEST 4 | Assert that in check mode status was not changed, reboot_required is True, a warning was displayed, and SELinux is configured properly
  ansible.builtin.assert:
    that:
      - _check_mode_test5 is success
      - _check_mode_test5.reboot_required
      - (_check_mode_test5.warnings | length ) >= 1
      - ansible_selinux.config_mode == 'disabled'
      - ansible_selinux.type == 'targeted'

# Fifth Test
# ##############################################################################
# Remove SELINUX and SELINUXTYPE keys from /etc/selinux/config and make
# sure the module re-adds the expected lines

- name: TEST 5 | Remove SELINUX key from /etc/selinux/config
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: ^SELINUX=
    state: absent
    backup: true
  register: _lineinfile_out1

- name: TEST 5 | Debug _lineinfile_out1
  ansible.builtin.debug:
    var: _lineinfile_out1
    verbosity: 1

- name: TEST 5 | Set SELinux to enforcing
  ansible.posix.selinux:
    state: enforcing
    policy: targeted
  register: _set_enforcing1

- name: TEST 5 | Re-gather facts
  ansible.builtin.setup:

- name: TEST 5 | Debug ansible_selinux
  ansible.builtin.debug:
    var: ansible_selinux
    verbosity: 1

- name: TEST 5 | Assert that SELINUX key is populated
  ansible.builtin.assert:
    that:
      - _set_enforcing1 is success
      - _set_enforcing1 is changed
      - _set_enforcing1.state == 'enforcing'
      - ansible_selinux.config_mode == 'enforcing'

- name: TEST 5 | Remove SELINUXTYPE key from /etc/selinux/config
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: ^SELINUXTYPE=
    state: absent
  register: _lineinfile_out2

- name: TEST 5 | Debug _lineinfile_out2
  ansible.builtin.debug:
    var: _lineinfile_out2
    verbosity: 1

- name: TEST 5 | Set SELinux Policy to targeted
  ansible.posix.selinux:
    state: enforcing
    policy: targeted
  register: _set_policy2

- name: TEST 5 | Re-gather facts
  ansible.builtin.setup:

- name: TEST 5 | Debug ansible_selinux
  ansible.builtin.debug:
    var: ansible_selinux
    verbosity: 1

- name: TEST 5 | Assert that SELINUXTYPE key is populated
  ansible.builtin.assert:
    that:
      - _set_policy2 is success
      - _set_policy2 is changed
      - _set_policy2.policy == 'targeted'
      - ansible_selinux.type == 'targeted'

- name: TEST 5 | Restore original SELinux config file /etc/selinux/config
  ansible.builtin.copy:
    dest: /etc/selinux/config
    src: "{{ _lineinfile_out1['backup'] }}"
    remote_src: true
    mode: "0644"
